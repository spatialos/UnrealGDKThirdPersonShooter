// Copyright (c) Improbable Worlds Ltd, All Rights Reserved
// Note that this file has been generated automatically
package improbable.unreal.generated.tpsplayercontroller;

import "improbable/unreal/gdk/core_types.schema";

component TPSPlayerControllerSingleClientRepData {
	id = 100022;
	bytes field_targetviewrotation0 = 1; // COND_OwnerOnly // ::PlayerController
	bytes field_spawnlocation0 = 2; // COND_OwnerOnly // ::PlayerController
}
component TPSPlayerControllerMultiClientRepData {
	id = 100023;
	bool field_bhidden0 = 1; // COND_None // ::Actor
	bool field_breplicatemovement0 = 2; // COND_None // ::Actor
	bool field_btearoff0 = 3; // COND_None // ::Actor
	bool field_bcanbedamaged0 = 4; // COND_None // ::Actor
	uint32 field_remoterole0 = 5; // COND_None // ::Actor
	bytes field_replicatedmovement0 = 6; // COND_SimulatedOrPhysics // ::Actor
	UnrealObjectRef field_attachmentreplication0_attachparent0 = 7; // COND_Custom // RepAttachment::AttachmentReplication::Actor
	bytes field_attachmentreplication0_locationoffset0 = 8; // COND_Custom // RepAttachment::AttachmentReplication::Actor
	bytes field_attachmentreplication0_relativescale3d0 = 9; // COND_Custom // RepAttachment::AttachmentReplication::Actor
	bytes field_attachmentreplication0_rotationoffset0 = 10; // COND_Custom // RepAttachment::AttachmentReplication::Actor
	string field_attachmentreplication0_attachsocket0 = 11; // COND_Custom // RepAttachment::AttachmentReplication::Actor
	UnrealObjectRef field_attachmentreplication0_attachcomponent0 = 12; // COND_Custom // RepAttachment::AttachmentReplication::Actor
	UnrealObjectRef field_owner0 = 13; // COND_None // ::Actor
	uint32 field_role0 = 14; // COND_None // ::Actor
	UnrealObjectRef field_instigator0 = 15; // COND_None // ::Actor
	UnrealObjectRef field_playerstate0 = 16; // COND_None // ::Controller
	UnrealObjectRef field_pawn0 = 17; // COND_None // ::Controller
}
component TPSPlayerControllerHandoverData {
	id = 100024;
	UnrealObjectRef field_acknowledgedpawn0 = 1;
}
import "improbable/unreal/generated/UnrealTPSPlayerControllerTypes.schema";
import "improbable/unreal/generated/UnrealPlayerControllerTypes.schema";
import "improbable/unreal/generated/UnrealControllerTypes.schema";

component TPSPlayerControllerClientRPCs {
	id = 100025;
	command UnrealRPCCommandResponse clientjoinresults(tpsplayercontroller.ClientJoinResultsRequest);
	command UnrealRPCCommandResponse onserverstartedvisuallogger(playercontroller.OnServerStartedVisualLoggerRequest);
	command UnrealRPCCommandResponse clientwaskicked(playercontroller.ClientWasKickedRequest);
	command UnrealRPCCommandResponse clientvoicehandshakecomplete(playercontroller.ClientVoiceHandshakeCompleteRequest);
	command UnrealRPCCommandResponse clientupdatemultiplelevelsstreamingstatus(playercontroller.ClientUpdateMultipleLevelsStreamingStatusRequest);
	command UnrealRPCCommandResponse clientupdatelevelstreamingstatus(playercontroller.ClientUpdateLevelStreamingStatusRequest);
	command UnrealRPCCommandResponse clientunmuteplayer(playercontroller.ClientUnmutePlayerRequest);
	command UnrealRPCCommandResponse clienttravelinternal(playercontroller.ClientTravelInternalRequest);
	command UnrealRPCCommandResponse clientteammessage(playercontroller.ClientTeamMessageRequest);
	command UnrealRPCCommandResponse clientstopforcefeedback(playercontroller.ClientStopForceFeedbackRequest);
	command UnrealRPCCommandResponse clientstopcamerashake(playercontroller.ClientStopCameraShakeRequest);
	command UnrealRPCCommandResponse clientstopcameraanim(playercontroller.ClientStopCameraAnimRequest);
	command UnrealRPCCommandResponse clientstartonlinesession(playercontroller.ClientStartOnlineSessionRequest);
	command UnrealRPCCommandResponse clientspawncameralenseffect(playercontroller.ClientSpawnCameraLensEffectRequest);
	command UnrealRPCCommandResponse clientsetviewtarget(playercontroller.ClientSetViewTargetRequest);
	command UnrealRPCCommandResponse clientsetspectatorwaiting(playercontroller.ClientSetSpectatorWaitingRequest);
	command UnrealRPCCommandResponse clientsethud(playercontroller.ClientSetHUDRequest);
	command UnrealRPCCommandResponse clientsetforcemiplevelstoberesident(playercontroller.ClientSetForceMipLevelsToBeResidentRequest);
	command UnrealRPCCommandResponse clientsetcinematicmode(playercontroller.ClientSetCinematicModeRequest);
	command UnrealRPCCommandResponse clientsetcameramode(playercontroller.ClientSetCameraModeRequest);
	command UnrealRPCCommandResponse clientsetcamerafade(playercontroller.ClientSetCameraFadeRequest);
	command UnrealRPCCommandResponse clientsetblockonasyncloading(playercontroller.ClientSetBlockOnAsyncLoadingRequest);
	command UnrealRPCCommandResponse clientreturntomainmenuwithtextreason(playercontroller.ClientReturnToMainMenuWithTextReasonRequest);
	command UnrealRPCCommandResponse clientreturntomainmenu(playercontroller.ClientReturnToMainMenuRequest);
	command UnrealRPCCommandResponse clientretryclientrestart(playercontroller.ClientRetryClientRestartRequest);
	command UnrealRPCCommandResponse clientrestart(playercontroller.ClientRestartRequest);
	command UnrealRPCCommandResponse clientreset(playercontroller.ClientResetRequest);
	command UnrealRPCCommandResponse clientrepobjref(playercontroller.ClientRepObjRefRequest);
	command UnrealRPCCommandResponse clientreceivelocalizedmessage(playercontroller.ClientReceiveLocalizedMessageRequest);
	command UnrealRPCCommandResponse clientprestreamtextures(playercontroller.ClientPrestreamTexturesRequest);
	command UnrealRPCCommandResponse clientpreparemapchange(playercontroller.ClientPrepareMapChangeRequest);
	command UnrealRPCCommandResponse clientplaysoundatlocation(playercontroller.ClientPlaySoundAtLocationRequest);
	command UnrealRPCCommandResponse clientplaysound(playercontroller.ClientPlaySoundRequest);
	command UnrealRPCCommandResponse clientplayforcefeedback(playercontroller.ClientPlayForceFeedbackRequest);
	command UnrealRPCCommandResponse clientplaycamerashake(playercontroller.ClientPlayCameraShakeRequest);
	command UnrealRPCCommandResponse clientplaycameraanim(playercontroller.ClientPlayCameraAnimRequest);
	command UnrealRPCCommandResponse clientmuteplayer(playercontroller.ClientMutePlayerRequest);
	command UnrealRPCCommandResponse clientmessage(playercontroller.ClientMessageRequest);
	command UnrealRPCCommandResponse clientignoremoveinput(playercontroller.ClientIgnoreMoveInputRequest);
	command UnrealRPCCommandResponse clientignorelookinput(playercontroller.ClientIgnoreLookInputRequest);
	command UnrealRPCCommandResponse clientgotostate(playercontroller.ClientGotoStateRequest);
	command UnrealRPCCommandResponse clientgameended(playercontroller.ClientGameEndedRequest);
	command UnrealRPCCommandResponse clientforcegarbagecollection(playercontroller.ClientForceGarbageCollectionRequest);
	command UnrealRPCCommandResponse clientflushlevelstreaming(playercontroller.ClientFlushLevelStreamingRequest);
	command UnrealRPCCommandResponse clientendonlinesession(playercontroller.ClientEndOnlineSessionRequest);
	command UnrealRPCCommandResponse clientenablenetworkvoice(playercontroller.ClientEnableNetworkVoiceRequest);
	command UnrealRPCCommandResponse clientcommitmapchange(playercontroller.ClientCommitMapChangeRequest);
	command UnrealRPCCommandResponse clientclearcameralenseffects(playercontroller.ClientClearCameraLensEffectsRequest);
	command UnrealRPCCommandResponse clientcapbandwidth(playercontroller.ClientCapBandwidthRequest);
	command UnrealRPCCommandResponse clientcancelpendingmapchange(playercontroller.ClientCancelPendingMapChangeRequest);
	command UnrealRPCCommandResponse clientaddtexturestreamingloc(playercontroller.ClientAddTextureStreamingLocRequest);
	command UnrealRPCCommandResponse clientsetrotation(controller.ClientSetRotationRequest);
	command UnrealRPCCommandResponse clientsetlocation(controller.ClientSetLocationRequest);
}
component TPSPlayerControllerServerRPCs {
	id = 100026;
	command UnrealRPCCommandResponse servertryjoingame(tpsplayercontroller.ServerTryJoinGameRequest);
	command UnrealRPCCommandResponse serverviewself(playercontroller.ServerViewSelfRequest);
	command UnrealRPCCommandResponse serverviewprevplayer(playercontroller.ServerViewPrevPlayerRequest);
	command UnrealRPCCommandResponse serverviewnextplayer(playercontroller.ServerViewNextPlayerRequest);
	command UnrealRPCCommandResponse serververifyviewtarget(playercontroller.ServerVerifyViewTargetRequest);
	command UnrealRPCCommandResponse serverupdatemultiplelevelsvisibility(playercontroller.ServerUpdateMultipleLevelsVisibilityRequest);
	command UnrealRPCCommandResponse serverupdatelevelvisibility(playercontroller.ServerUpdateLevelVisibilityRequest);
	command UnrealRPCCommandResponse serverupdatecamera(playercontroller.ServerUpdateCameraRequest);
	command UnrealRPCCommandResponse serverunmuteplayer(playercontroller.ServerUnmutePlayerRequest);
	command UnrealRPCCommandResponse servertoggleailogging(playercontroller.ServerToggleAILoggingRequest);
	command UnrealRPCCommandResponse servershorttimeout(playercontroller.ServerShortTimeoutRequest);
	command UnrealRPCCommandResponse serversetspectatorwaiting(playercontroller.ServerSetSpectatorWaitingRequest);
	command UnrealRPCCommandResponse serversetspectatorlocation(playercontroller.ServerSetSpectatorLocationRequest);
	command UnrealRPCCommandResponse serverrestartplayer(playercontroller.ServerRestartPlayerRequest);
	command UnrealRPCCommandResponse serverpause(playercontroller.ServerPauseRequest);
	command UnrealRPCCommandResponse servernotifyloadedworld(playercontroller.ServerNotifyLoadedWorldRequest);
	command UnrealRPCCommandResponse servermuteplayer(playercontroller.ServerMutePlayerRequest);
	command UnrealRPCCommandResponse servercheckclientpossessionreliable(playercontroller.ServerCheckClientPossessionReliableRequest);
	command UnrealRPCCommandResponse servercheckclientpossession(playercontroller.ServerCheckClientPossessionRequest);
	command UnrealRPCCommandResponse serverchangename(playercontroller.ServerChangeNameRequest);
	command UnrealRPCCommandResponse servercamera(playercontroller.ServerCameraRequest);
	command UnrealRPCCommandResponse serveracknowledgepossession(playercontroller.ServerAcknowledgePossessionRequest);
}
component TPSPlayerControllerNetMulticastRPCs {
	id = 100027;
}
